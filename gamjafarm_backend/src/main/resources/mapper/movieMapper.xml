<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gamja_farm.mapper.MovieMapper">

	<resultMap id="movieResultMap" type="MovieHomeDTO">
		<result property="code" column="code" />
		<result property="name_kor" column="name_kor" />
		<result property="name_eng" column="name_eng" />
		<result property="release_at" column="release_at" />
		<result property="country" column="country" />
		<result property="poster" column="poster" />
		<result property="ranking" column="ranking" />
		<result property="rate_avg" column="rate_avg" />
		
	</resultMap>


	<select id="dailyList" parameterType="String" resultMap="movieResultMap">
		SELECT m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster, b.ranking,
				(SELECT ROUND(IFNULL(SUM(rate) / IFNULL(COUNT(*), 1), 0), 1)
				FROM user_movie_rate umr
				WHERE umr.movie_code = m.code) AS avg_rating
		FROM movie m
		INNER JOIN (
			SELECT movie_code, ranking
			FROM movie_boxoffice
			WHERE type = "일별 박스오피스" AND box_at = #{boxat}
		) b ON m.code = b.movie_code
	</select>


	<select id="weekList" parameterType="String" resultMap="movieResultMap" >
		SELECT m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster, b.ranking,
				(SELECT ROUND(IFNULL(SUM(rate) / IFNULL(COUNT(*), 1), 0), 1)
				FROM user_movie_rate umr
				WHERE umr.movie_code = m.code) AS avg_rating
		FROM movie m
		INNER JOIN (
			SELECT movie_code, ranking
			FROM movie_boxoffice
			WHERE type = "주간 박스오피스" AND box_week = #{weekat}
		) b ON m.code = b.movie_code
	</select>
	

	<select id="domesticList" resultMap="movieResultMap">
		SELECT m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster,
				ROUND(IFNULL(SUM(umr.rate) / IFNULL(COUNT(umr.rate), 1), 0), 1) AS rate_avg
		FROM movie m
		LEFT JOIN user_movie_rate umr ON m.code = umr.movie_code
		WHERE m.country = "한국"
		GROUP BY m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster
		ORDER BY m.release_at DESC, RAND()
		LIMIT 20
	</select>

	<select id="foreignList" resultMap="movieResultMap">
		SELECT m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster,
				ROUND(IFNULL(SUM(umr.rate) / IFNULL(COUNT(umr.rate), 1), 0), 1) AS rate_avg
		FROM movie m
		LEFT JOIN user_movie_rate umr ON m.code = umr.movie_code
		WHERE m.country != "한국"
		GROUP BY m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster
		ORDER BY m.release_at DESC, RAND()
		LIMIT 20
	</select>

	<select id="animationList" resultMap="movieResultMap">
		SELECT m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster,
				ROUND(IFNULL(SUM(umr.rate) / IFNULL(COUNT(umr.rate), 1), 0), 1) AS rate_avg
		FROM movie m
		LEFT JOIN user_movie_rate umr ON m.code = umr.movie_code
		INNER JOIN (
			SELECT movie_code
			FROM movie_genre
			WHERE genre_1 = "애니메이션" OR genre_2 = "애니메이션"
			LIMIT 20
		) AS mg ON m.code = mg.movie_code
		GROUP BY m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster
	</select>

	<select id="genreList" resultMap="movieResultMap" parameterType="MovieSearchDTO">
		SELECT m.code, m.name_kor, m.name_eng, m.release_at, m.country, m.poster,
			ROUND(IFNULL(SUM(umr.rate) / IFNULL(COUNT(umr.rate), 1), 0), 1) AS rate_avg
		from movie m
		LEFT JOIN user_movie_rate umr ON m.code = umr.movie_code
		INNER JOIN (
			SELECT movie_code
			FROM movie_genre
			WHERE genre_1 = #{genre} or genre_2 = #{genre}
			ORDER BY idx ASC
			LIMIT #{startRow}, #{blockCount}
			) AS mg ON m.code = mg.movie_code
		GROUP BY m.idx;
	</select>
	
	<select id="movieDetail" resultType="MovieDetailDTO" parameterType="String">
		SELECT m.*, p.plot, g.genre_1, g.genre_2,
			(
			SELECT total_audience
			FROM movie_boxoffice
			WHERE movie_code = #{code}
			ORDER BY COALESCE(box_at, box_week) ASC
			LIMIT 1
		) as total_audience,
			ROUND(IFNULL(SUM(umr.rate) / IFNULL(COUNT(umr.rate), 1), 0), 1) AS rate_avg
		FROM movie m
		LEFT JOIN movie_plot p ON m.code = p.movie_code
		LEFT JOIN movie_genre g ON m.code = g.movie_code
		LEFT JOIN user_movie_rate umr ON m.code = umr.movie_code
		WHERE m.code = #{code}
		GROUP BY m.idx, p.idx, g.idx;
	</select>


</mapper>
